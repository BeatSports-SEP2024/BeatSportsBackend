// <auto-generated />
using System;
using BeatSportsAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeatSportsAPI.Infrastructure.Migrations
{
    [DbContext(typeof(BeatSportsAPIDbContext))]
    [Migration("20240726140755_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a6fe7d8-efaa-4429-ada3-b8c4b5fb1d5f"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4093),
                            DateOfBirth = new DateTime(2002, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(3970),
                            FirstName = "Nguyen",
                            Gender = "Nam",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4093),
                            LastName = "Minh",
                            Password = "+mxD+BN4RulMK9+5cNGQCXMjv7QLodaU2+cuhaAyV+CyB3aBgvJgL9fsIFGAjztemOql42R54qtqEglXohxH5DrOFNSBLiUxezAI0BmdgkbxK5nEX56C3Ah0JRz00m72o2g4woGFYAwXJLjMQA9n3usmoKbdmqnaKvXKJmWncdo=:SYEwsRfpkj8lenWTIAg/9T8VfvDCq1OUdjoroDDOmQhb2j3+OSsxnYzgoboMdCsysWZ56W5xbUeIS1cwiM0WyA==",
                            ProfilePictureURL = "Avatar Picture",
                            Role = "Owner",
                            UserName = "owner1"
                        },
                        new
                        {
                            Id = new Guid("bd7ee2c3-5c10-4567-9a87-d071d6f8c3b2"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4146),
                            DateOfBirth = new DateTime(2002, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4143),
                            FirstName = "Vu",
                            Gender = "Nữ",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4147),
                            LastName = "Duong",
                            Password = "o2Im2JNNQFkz9Y81wTDlsQi1BQ2ieC1MZBS8LipCKktwpZ4qdjfAOVketYYSmfCzWRJRS8ADbBv6dWrB8iNMLBLzO3pfnqMzEwrf+HxjZBPHpak45b70+PTXwdWxRaeriftYNPwGJw6pv/BDkcMSfN4YlogNqatb6I/D5jaHOJM=:aYcFlx9lf74mWR6Or880XR2H9ULUouiqRh7ctz+ke9r5LIQ6qR1Atpzx65mBPez0JHztAv3/XoUB4HI3KfEccg==",
                            ProfilePictureURL = "Avatar Picture",
                            Role = "Owner",
                            UserName = "owner12"
                        },
                        new
                        {
                            Id = new Guid("7e9fe0da-2abe-4e58-bdfd-5d64a6549d47"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4181),
                            DateOfBirth = new DateTime(2002, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4178),
                            FirstName = "Nguyen",
                            Gender = "Nam",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4182),
                            LastName = "Vi",
                            Password = "fnfZspRGRD2NtVjzXomipxQlPzPRPqIl1sRNJ+2+UGlRLGQRE7tNlmHfs2A+BNuPDPxz9XVvUSn9G6EO5i5uB3FIVK52uQ3gQH0XTezlGJncmMwO3QHAwjALYiW2x66P8mCqL97uagL9RwdGZ0GAptktAnCnKuK9AaQ9jlBSvK4=:Ns6pMfCmRHquWFgkzwpy9v4XJ3HsOY2vIhip6G2FK39YoDreGtISJBlm9viI2ZFh1RrfZmtzswL+nDVc1kPLbw==",
                            ProfilePictureURL = "Avatar Picture",
                            Role = "Customer",
                            UserName = "customer1"
                        },
                        new
                        {
                            Id = new Guid("91c2f231-c3e9-4a13-a4d6-1ab2ca2c9754"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4215),
                            DateOfBirth = new DateTime(2002, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4212),
                            FirstName = "Nguyen",
                            Gender = "Nam",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4215),
                            LastName = "Nhan",
                            Password = "Dy0i4Ar15F4O0ioZE/fJWwrW9zOg1SJRBYRFX81nHPOq5j2D1FxkZO6PE365RBZ2VKf8SMdbjpRxN6uYbst1m53swwJHerJdeI1Ol8sJ2Ya1Uwd3ECVfQOH1R/98IbU2MHmp6Hydvpwhlp2WkKV+9+dDGQwZC7C2kcXuTQBMQ4s=:9DerGXU5hplkG7gAdx9UURtyNLCReHLzHlUftHmfQ6+McWI3fftRqKUwRtwQI5bwHoZC7Nz9rS7RrP2u/656ww==",
                            ProfilePictureURL = "Avatar Picture",
                            Role = "Customer",
                            UserName = "customer2"
                        },
                        new
                        {
                            Id = new Guid("9dca19fd-072c-4d2f-b7a7-1d0d273f9014"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4254),
                            DateOfBirth = new DateTime(2002, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4251),
                            FirstName = "Nguyen",
                            Gender = "Nam",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4254),
                            LastName = "Binh",
                            Password = "juX5qVpiU8Wfy37zSNhZdUeytAKkqztpjZgNoELf9ufUILkIG0IPYlM05I2dR8RK+0BslFAkujffUpmqXsK0AspDo8YObN4w6diVml2ZCTc7pxAHK6UdTYVMqwMPpo8F3S6DzZBmY3ria7PxNrr1mv3GwDkxLPJfJVsfqplEdV8=:Tn5Zg/V55bzgCHVcfMjKqyigp+rOEqc5AIhXZhLh1T1yUW6vJioXXyXk1+XjP+pykp6/s34iyx2OW6GrwcFlIA==",
                            ProfilePictureURL = "Avatar Picture",
                            Role = "Customer",
                            UserName = "customer3"
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourtSubdivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTimePlaying")
                        .HasColumnType("time");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeposit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoomBooking")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlayingDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTimePlaying")
                        .HasColumnType("time");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CourtSubdivisionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fa91b15-e147-4a4c-931b-5a1abc2efb93"),
                            BookingDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingStatus = "Approved",
                            CampaignId = new Guid("d81fe96c-b8f4-4f64-b4f8-1a3bc9f41425"),
                            CourtSubdivisionId = new Guid("20f46754-d281-44c6-aa5c-d97ac4f3d8cb"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4966),
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174100"),
                            EndTimePlaying = new TimeSpan(0, 20, 0, 0, 0),
                            IsDelete = false,
                            IsDeposit = true,
                            IsRoomBooking = false,
                            PlayingDate = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTimePlaying = new TimeSpan(0, 18, 0, 0, 0),
                            TotalAmount = 1000m
                        },
                        new
                        {
                            Id = new Guid("22ae1f0b-3b4a-4c7b-947e-3612c4b6a8cd"),
                            BookingDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingStatus = "Approved",
                            CampaignId = new Guid("7f34ee57-38bc-4852-a7d6-57f1b26ed5af"),
                            CourtSubdivisionId = new Guid("7a62ef5e-fc97-48d3-a0a2-e9e290665f8d"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4993),
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174101"),
                            EndTimePlaying = new TimeSpan(0, 19, 0, 0, 0),
                            IsDelete = false,
                            IsDeposit = false,
                            IsRoomBooking = true,
                            PlayingDate = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTimePlaying = new TimeSpan(0, 17, 0, 0, 0),
                            TotalAmount = 1200m
                        },
                        new
                        {
                            Id = new Guid("fba3e7b2-981f-4038-a306-7432db3ef4c6"),
                            BookingDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingStatus = "Finished",
                            CampaignId = new Guid("9de56f74-7834-4aeb-b774-e18abc1bcedd"),
                            CourtSubdivisionId = new Guid("e72938fe-50a0-4b5e-a898-a5cbf5b2039c"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4997),
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174102"),
                            EndTimePlaying = new TimeSpan(0, 22, 0, 0, 0),
                            IsDelete = false,
                            IsDeposit = true,
                            IsRoomBooking = false,
                            PlayingDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTimePlaying = new TimeSpan(0, 20, 0, 0, 0),
                            TotalAmount = 800m
                        },
                        new
                        {
                            Id = new Guid("eadc2d2e-3ad3-4d6f-a4b1-55b6b233fe2e"),
                            BookingDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingStatus = "Rejected",
                            CampaignId = new Guid("d81fe96c-b8f4-4f64-b4f8-1a3bc9f41425"),
                            CourtSubdivisionId = new Guid("d104a1db-67e3-4351-9b3c-037ec06c245e"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5001),
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174102"),
                            EndTimePlaying = new TimeSpan(0, 22, 0, 0, 0),
                            IsDelete = false,
                            IsDeposit = true,
                            IsRoomBooking = false,
                            PlayingDate = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTimePlaying = new TimeSpan(0, 20, 0, 0, 0),
                            TotalAmount = 1800m
                        },
                        new
                        {
                            Id = new Guid("6c4099e7-0731-4f9d-90ee-fb7791040777"),
                            BookingDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingStatus = "Cancel",
                            CampaignId = new Guid("d81fe96c-b8f4-4f64-b4f8-1a3bc9f41425"),
                            CourtSubdivisionId = new Guid("d104a1db-67e3-4351-9b3c-037ec06c245e"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5005),
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174100"),
                            EndTimePlaying = new TimeSpan(0, 22, 0, 0, 0),
                            IsDelete = false,
                            IsDeposit = false,
                            IsRoomBooking = false,
                            PlayingDate = new DateTime(2024, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            StartTimePlaying = new TimeSpan(0, 20, 0, 0, 0),
                            TotalAmount = 1800m
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampaignName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateApplying")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxValueDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinValueApply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityOfCampaign")
                        .HasColumnType("int");

                    b.Property<string>("ReasonOfReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportTypeApply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateApplying")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d81fe96c-b8f4-4f64-b4f8-1a3bc9f41425"),
                            CampaignImageURL = "Campaign Image 1",
                            CampaignName = "Discount 20% base price",
                            CourtId = new Guid("ef2bd841-3214-434b-95aa-080165f5a2b2"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4903),
                            EndDateApplying = new DateTime(2024, 7, 30, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4896),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4903),
                            MaxValueDiscount = 20000m,
                            MinValueApply = 40000m,
                            PercentDiscount = 20m,
                            QuantityOfCampaign = 20,
                            SportTypeApply = "Badminton",
                            StartDateApplying = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4896),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7f34ee57-38bc-4852-a7d6-57f1b26ed5af"),
                            CampaignImageURL = "Campaign Image 2",
                            CampaignName = "Christmas Discount!!!",
                            CourtId = new Guid("58b1deaf-656b-4fe0-90d8-396c5479381f"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4908),
                            EndDateApplying = new DateTime(2024, 8, 5, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4906),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4908),
                            MaxValueDiscount = 45000m,
                            MinValueApply = 20000m,
                            PercentDiscount = 25m,
                            QuantityOfCampaign = 10,
                            SportTypeApply = "Soccer",
                            StartDateApplying = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4906),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9de56f74-7834-4aeb-b774-e18abc1bcedd"),
                            CampaignImageURL = "Campaign Image 3",
                            CampaignName = "Lunar New Year Discount!!!",
                            CourtId = new Guid("ef2bd841-3214-434b-95aa-080165f5a2b2"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4913),
                            EndDateApplying = new DateTime(2024, 7, 31, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4911),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4914),
                            MaxValueDiscount = 50000m,
                            MinValueApply = 0m,
                            PercentDiscount = 30m,
                            QuantityOfCampaign = 10,
                            SportTypeApply = "Volleyball",
                            StartDateApplying = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4911),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("45a55f14-ac7d-4e58-b9a9-c830013d07f1"),
                            CampaignImageURL = "Campaign Image 4",
                            CampaignName = "Birthday Discount!!!",
                            CourtId = new Guid("5ab1f835-cf9f-4847-b4a7-d0d20b183b44"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4918),
                            EndDateApplying = new DateTime(2024, 7, 27, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4916),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4918),
                            MaxValueDiscount = 50000m,
                            MinValueApply = 1m,
                            PercentDiscount = 25m,
                            QuantityOfCampaign = 10,
                            SportTypeApply = "All",
                            StartDateApplying = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4916),
                            Status = 1
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourtAvatarImgUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourtName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleMapURLs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("LatitudeDelta")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeDelta")
                        .HasColumnType("float");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("time");

                    b.Property<string>("WallpaperUrls")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2642e7e-9a72-4e28-9c79-1e8e80134c8f"),
                            Address = "Số 45 Bùi Xương Trạch, phường Long Trường, Quận 9, Thành phố, Thủ Đức, Thành phố Hồ Chí Minh",
                            CourtName = "Sân bóng đá mini Long Trường Quận 9",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4715),
                            Description = "Sân bóng mini tiêu chuẩn cao (chuẩn FiFa) với hệ thống phụ trợ (nhà thay đồ, nhà tắm, nhà vệ sinh) sạch sẽ thoáng mát duy nhất.",
                            GoogleMapURLs = "https://maps.app.goo.gl/s6yWXEpDYU1DNjuF6",
                            ImageUrls = "image1.jpge",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4715),
                            Latitude = 10.8032638,
                            Longitude = 106.81126829999999,
                            OwnerId = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            PlaceId = "10.805515145695411, 106.81088572205702",
                            TimeEnd = new TimeSpan(0, 23, 59, 59, 0),
                            TimeStart = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ef2bd841-3214-434b-95aa-080165f5a2b2"),
                            Address = "40 Đ. Số 11, Trường Thọ, Thủ Đức, Thành phố Hồ Chí Minh, Vietnam",
                            CourtName = "Sân cầu lông B-ZONE 11",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4719),
                            Description = "Sân cầu lông trang bị tiện nghi đầy đủ, giữ xe an ninh",
                            GoogleMapURLs = "https://maps.app.goo.gl/cwrHGkHsM4769eSE7",
                            ImageUrls = "image1.jpge",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4719),
                            Latitude = 10.8447102,
                            Longitude = 106.7530548,
                            OwnerId = new Guid("123e4567-e89b-12d3-a456-426614174001"),
                            PlaceId = "10.845057917596483, 106.75295823555061",
                            TimeEnd = new TimeSpan(0, 22, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5ab1f835-cf9f-4847-b4a7-d0d20b183b44"),
                            Address = "Đ. Số 11/Hẻm 52 Tổ 1, Khu phố 9, Thủ Đức, Thành phố Hồ Chí Minh, Vietnam",
                            CourtName = "Sân bóng đá VNV",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4724),
                            Description = "Sân đẹp, cỏ xịn, đèn sáng, có chỗ để xe oto, bóng xịn",
                            GoogleMapURLs = "https://maps.app.goo.gl/UUCSZm1p9ngEx7k79",
                            ImageUrls = "image1.jpge",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4724),
                            Latitude = 10.844542499999999,
                            Longitude = 106.7526029,
                            OwnerId = new Guid("123e4567-e89b-12d3-a456-426614174001"),
                            PlaceId = "10.844905847478088, 106.75213708986735",
                            TimeEnd = new TimeSpan(0, 15, 30, 0, 0),
                            TimeStart = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4f15e1fd-1f5c-40ef-9947-fa480a6859d1"),
                            Address = "26 Lê Quý Đôn, Phường Võ Thị Sáu, Quận 3, Thành phố Hồ Chí Minh",
                            CourtName = "Sân cầu lông Marie Curie",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4728),
                            Description = "Sân cầu lông hiện đại với sàn gỗ, thuận tiện cho các hoạt động thi đấu và tập luyện.",
                            GoogleMapURLs = "https://maps.google.com/?q=26+Le+Quy+Don",
                            ImageUrls = "image1.jpge",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4728),
                            Latitude = 10.7821421,
                            Longitude = 106.690265,
                            OwnerId = new Guid("123e4567-e89b-12d3-a456-426614174001"),
                            PlaceId = "10.786887, 106.690193",
                            TimeEnd = new TimeSpan(0, 22, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("58b1deaf-656b-4fe0-90d8-396c5479381f"),
                            Address = "36/5 Luy Bán Bích, Phường Tân Thới Hòa, Quận Tân Phú, Thành phố Hồ Chí Minh",
                            CourtName = "Sân bóng chuyền Tân Bình",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4731),
                            Description = "Sân bóng chuyền ngoài trời với không gian rộng rãi, phù hợp cho cả tập luyện và thi đấu.",
                            GoogleMapURLs = "https://maps.google.com/?q=36/5+Luy+Bán+Bích",
                            ImageUrls = "image1.jpge",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4731),
                            Latitude = 10.761793000000001,
                            Longitude = 106.632865,
                            OwnerId = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            PlaceId = "10.768199, 106.628938",
                            TimeEnd = new TimeSpan(0, 21, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("72f0c66d-700a-4c05-9f78-8b9fdd3a7cda"),
                            Address = "219 Lý Thường Kiệt, Phường 15, Quận 11, Thành phố Hồ Chí Minh",
                            CourtName = "Sân bóng đá Phú Thọ",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4736),
                            Description = "Sân bóng đá lớn với cỏ nhân tạo chất lượng cao, có khán đài và hệ thống chiếu sáng tốt.",
                            GoogleMapURLs = "https://maps.google.com/?q=219+Lý+Thường+Kiệt",
                            ImageUrls = "image1.jpge",
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4736),
                            Latitude = 10.76754,
                            Longitude = 106.658356,
                            OwnerId = new Guid("123e4567-e89b-12d3-a456-426614174001"),
                            PlaceId = "10.769555, 106.663338",
                            TimeEnd = new TimeSpan(0, 23, 30, 0, 0),
                            TimeStart = new TimeSpan(0, 4, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourtSubdivisionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourtSubdivisionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourtSubdivisionSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonOfRejected")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("CourtSubdivisionSettingId");

                    b.ToTable("CourtSubdivisions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45ed7684-340d-414b-ae8c-fda358f62ac2"),
                            BasePrice = 60000m,
                            CourtId = new Guid("58b1deaf-656b-4fe0-90d8-396c5479381f"),
                            CourtSubdivisionDescription = "Sân bóng chuyền xi măng",
                            CourtSubdivisionName = "Sân bóng chuyền Ellen, phân cấp 1",
                            CourtSubdivisionSettingId = new Guid("0c9e0496-e891-468c-aca5-6c09c1a8f159"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4823),
                            CreatedStatus = 1,
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4823)
                        },
                        new
                        {
                            Id = new Guid("b5a7f639-aaa7-412d-8bde-7767489e6839"),
                            BasePrice = 60000m,
                            CourtId = new Guid("58b1deaf-656b-4fe0-90d8-396c5479381f"),
                            CourtSubdivisionDescription = "Sân bóng chuyền trong nhà",
                            CourtSubdivisionName = "Sân bóng chuyền Ellen, phân cấp 2",
                            CourtSubdivisionSettingId = new Guid("effd5616-ad35-4204-8c5e-01ad289855e8"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4826),
                            CreatedStatus = 0,
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4827)
                        },
                        new
                        {
                            Id = new Guid("20f46754-d281-44c6-aa5c-d97ac4f3d8cb"),
                            BasePrice = 60000m,
                            CourtId = new Guid("ef2bd841-3214-434b-95aa-080165f5a2b2"),
                            CourtSubdivisionDescription = "Sân trong nhà",
                            CourtSubdivisionName = "Sân cầu lông B-ZONE 11, phân cấp 1",
                            CourtSubdivisionSettingId = new Guid("63998125-8cbd-41b7-9123-a6c7ca3ad63e"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4831),
                            CreatedStatus = 1,
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4831)
                        },
                        new
                        {
                            Id = new Guid("7a62ef5e-fc97-48d3-a0a2-e9e290665f8d"),
                            BasePrice = 110000m,
                            CourtId = new Guid("ef2bd841-3214-434b-95aa-080165f5a2b2"),
                            CourtSubdivisionDescription = "Sân trong nhà",
                            CourtSubdivisionName = "Sân cầu lông B-ZONE 11, phân cấp 2",
                            CourtSubdivisionSettingId = new Guid("63998125-8cbd-41b7-9123-a6c7ca3ad63e"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4834),
                            CreatedStatus = 2,
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4834)
                        },
                        new
                        {
                            Id = new Guid("e72938fe-50a0-4b5e-a898-a5cbf5b2039c"),
                            BasePrice = 110000m,
                            CourtId = new Guid("ef2bd841-3214-434b-95aa-080165f5a2b2"),
                            CourtSubdivisionDescription = "Sân ngoài trời",
                            CourtSubdivisionName = "Sân cầu lông B-ZONE 11, phân cấp 3",
                            CourtSubdivisionSettingId = new Guid("9ce93f4d-b691-4622-95a5-3825916409f6"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4836),
                            CreatedStatus = 0,
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4837)
                        },
                        new
                        {
                            Id = new Guid("c7a8a07c-dd21-4323-bb8a-25c073fabcde"),
                            BasePrice = 110000m,
                            CourtId = new Guid("d2642e7e-9a72-4e28-9c79-1e8e80134c8f"),
                            CourtSubdivisionDescription = "Sân bóng đá nhân tạo",
                            CourtSubdivisionName = "Sân 1",
                            CourtSubdivisionSettingId = new Guid("a93c57bd-f6d5-414e-a4b2-5aa269729a43"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4839),
                            CreatedStatus = 1,
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4839)
                        },
                        new
                        {
                            Id = new Guid("d104a1db-67e3-4351-9b3c-037ec06c245e"),
                            BasePrice = 190000m,
                            CourtId = new Guid("d2642e7e-9a72-4e28-9c79-1e8e80134c8f"),
                            CourtSubdivisionDescription = "Sân bóng đá nhân tạo",
                            CourtSubdivisionName = "Sân 2",
                            CourtSubdivisionSettingId = new Guid("a93c57bd-f6d5-414e-a4b2-5aa269729a43"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4842),
                            CreatedStatus = 0,
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4843)
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivisionSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourtType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SportCategoryId");

                    b.ToTable("CourtSubdivisionSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a93c57bd-f6d5-414e-a4b2-5aa269729a43"),
                            CourtType = "Sân bóng đá nhân tạo 7",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4772),
                            IsDelete = false,
                            SportCategoryId = new Guid("a781b595-6a4f-4d9a-b845-fb0f5c2c9a0a")
                        },
                        new
                        {
                            Id = new Guid("457c955b-857d-483d-8e54-02c87dbcffa9"),
                            CourtType = "Sân bóng đá nhân tạo 5",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4774),
                            IsDelete = false,
                            SportCategoryId = new Guid("a781b595-6a4f-4d9a-b845-fb0f5c2c9a0a")
                        },
                        new
                        {
                            Id = new Guid("3593decc-3ace-451c-842d-3369cfe571c2"),
                            CourtType = "Sân bóng đá nhân tạo 11",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4776),
                            IsDelete = false,
                            SportCategoryId = new Guid("a781b595-6a4f-4d9a-b845-fb0f5c2c9a0a")
                        },
                        new
                        {
                            Id = new Guid("31689b32-b8d8-4993-98f5-33b436b4f293"),
                            CourtType = "Sân bóng đá cỏ tự nhiên 7",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4777),
                            IsDelete = false,
                            SportCategoryId = new Guid("a781b595-6a4f-4d9a-b845-fb0f5c2c9a0a")
                        },
                        new
                        {
                            Id = new Guid("089e939e-10ea-44b6-b7cd-f6d69cf6c06a"),
                            CourtType = "Sân bóng đá cỏ tự nhiên 11",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4782),
                            IsDelete = false,
                            SportCategoryId = new Guid("a781b595-6a4f-4d9a-b845-fb0f5c2c9a0a")
                        },
                        new
                        {
                            Id = new Guid("41ae23f7-42fe-4a40-8c36-021dc7c1dd06"),
                            CourtType = "Sân bóng chuyền mặt cát",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4783),
                            IsDelete = false,
                            SportCategoryId = new Guid("4a6b05bc-fc25-45fe-abe9-11a4d9380f07")
                        },
                        new
                        {
                            Id = new Guid("effd5616-ad35-4204-8c5e-01ad289855e8"),
                            CourtType = "Sân bóng chuyền trong nhà",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4785),
                            IsDelete = false,
                            SportCategoryId = new Guid("4a6b05bc-fc25-45fe-abe9-11a4d9380f07")
                        },
                        new
                        {
                            Id = new Guid("0c9e0496-e891-468c-aca5-6c09c1a8f159"),
                            CourtType = "Sân bóng chuyền xi măng",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4792),
                            IsDelete = false,
                            SportCategoryId = new Guid("4a6b05bc-fc25-45fe-abe9-11a4d9380f07")
                        },
                        new
                        {
                            Id = new Guid("63998125-8cbd-41b7-9123-a6c7ca3ad63e"),
                            CourtType = "Sân cầu lông trong nhà",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4794),
                            IsDelete = false,
                            SportCategoryId = new Guid("c01babc6-4047-47d5-bc9b-93c678b6342d")
                        },
                        new
                        {
                            Id = new Guid("9ce93f4d-b691-4622-95a5-3825916409f6"),
                            CourtType = "Sân cầu lông ngoài trời",
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4795),
                            IsDelete = false,
                            SportCategoryId = new Guid("c01babc6-4047-47d5-bc9b-93c678b6342d")
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.TimeChecking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourtSubdivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourtSubdivisionId");

                    b.ToTable("TimeChecking");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CourtSubdivisionId = new Guid("20f46754-d281-44c6-aa5c-d97ac4f3d8cb"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5117),
                            DateBooking = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5123),
                            EndTime = new DateTime(2024, 7, 26, 18, 7, 54, 174, DateTimeKind.Utc).AddTicks(5119),
                            IsDelete = false,
                            IsLock = false,
                            StartTime = new DateTime(2024, 7, 26, 16, 7, 54, 174, DateTimeKind.Utc).AddTicks(5119)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CourtSubdivisionId = new Guid("7a62ef5e-fc97-48d3-a0a2-e9e290665f8d"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5125),
                            DateBooking = new DateTime(2024, 7, 27, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5127),
                            EndTime = new DateTime(2024, 7, 26, 19, 7, 54, 174, DateTimeKind.Utc).AddTicks(5126),
                            IsDelete = false,
                            IsLock = true,
                            StartTime = new DateTime(2024, 7, 26, 17, 7, 54, 174, DateTimeKind.Utc).AddTicks(5125)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CourtSubdivisionId = new Guid("e72938fe-50a0-4b5e-a898-a5cbf5b2039c"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5128),
                            DateBooking = new DateTime(2024, 7, 27, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5129),
                            EndTime = new DateTime(2024, 7, 27, 18, 7, 54, 174, DateTimeKind.Utc).AddTicks(5129),
                            IsDelete = false,
                            IsLock = false,
                            StartTime = new DateTime(2024, 7, 27, 16, 7, 54, 174, DateTimeKind.Utc).AddTicks(5128)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CourtSubdivisionId = new Guid("45ed7684-340d-414b-ae8c-fda358f62ac2"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5131),
                            DateBooking = new DateTime(2024, 7, 28, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5132),
                            EndTime = new DateTime(2024, 7, 28, 18, 7, 54, 174, DateTimeKind.Utc).AddTicks(5132),
                            IsDelete = false,
                            IsLock = true,
                            StartTime = new DateTime(2024, 7, 28, 16, 7, 54, 174, DateTimeKind.Utc).AddTicks(5131)
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CourtSubdivisionId = new Guid("b5a7f639-aaa7-412d-8bde-7767489e6839"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5133),
                            DateBooking = new DateTime(2024, 7, 29, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5135),
                            EndTime = new DateTime(2024, 7, 29, 17, 7, 54, 174, DateTimeKind.Utc).AddTicks(5134),
                            IsDelete = false,
                            IsLock = false,
                            StartTime = new DateTime(2024, 7, 29, 15, 7, 54, 174, DateTimeKind.Utc).AddTicks(5134)
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.TimePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefundDeposit")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PercentDeposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RateMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("TimePeriods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34fe77a7-485c-4fc4-b7c9-20f7332538f9"),
                            CourtId = new Guid("ef2bd841-3214-434b-95aa-080165f5a2b2"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5073),
                            Description = "Giờ Cao Điểm",
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsDelete = false,
                            IsRefundDeposit = false,
                            RateMultiplier = 1.5m,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("88f7363a-5d6f-41f7-881c-34aa89f10eb2"),
                            CourtId = new Guid("5ab1f835-cf9f-4847-b4a7-d0d20b183b44"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5080),
                            Description = "Giờ Thấp Điểm",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsDelete = false,
                            IsRefundDeposit = false,
                            RateMultiplier = 0.8m,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("03ac6742-bc41-4ee1-8057-657f0a6c331c"),
                            CourtId = new Guid("4f15e1fd-1f5c-40ef-9947-fa480a6859d1"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5082),
                            Description = "Giờ Bình Thường",
                            EndTime = new TimeSpan(0, 23, 0, 0, 0),
                            IsDelete = false,
                            IsRefundDeposit = false,
                            RateMultiplier = 1.0m,
                            StartTime = new TimeSpan(0, 20, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RewardPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426614174100"),
                            AccountId = new Guid("7e9fe0da-2abe-4e58-bdfd-5d64a6549d47"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4651),
                            IsDelete = false,
                            RewardPoints = 0
                        },
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426614174101"),
                            AccountId = new Guid("91c2f231-c3e9-4a13-a4d6-1ab2ca2c9754"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4654),
                            IsDelete = false,
                            RewardPoints = 0
                        },
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426614174102"),
                            AccountId = new Guid("9dca19fd-072c-4d2f-b7a7-1d0d273f9014"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4655),
                            IsDelete = false,
                            RewardPoints = 0
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.DeviceToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("DeviceTokens");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FeedbackAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FeedbackStar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeedbackStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("CourtId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            AccountId = new Guid("4a6fe7d8-efaa-4429-ada3-b8c4b5fb1d5f"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4678),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426614174001"),
                            AccountId = new Guid("bd7ee2c3-5c10-4567-9a87-d071d6f8c3b2"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4680),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantIpnUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantReturnUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantWebLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Merchants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("281b0f0d-1b5f-4a54-a102-be0aeaaddaf6"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5149),
                            IsActive = false,
                            IsDelete = false,
                            MerchantIpnUrl = "",
                            MerchantName = "BeatSports_AppUser",
                            MerchantReturnUrl = "exp://172.31.99.194:8081",
                            MerchantWebLink = "https://www.youtube.com/index",
                            SecretKey = "3EABD179-956C-4979-A068-01A600D7C8E7"
                        },
                        new
                        {
                            Id = new Guid("a82ce63c-6c91-4451-8f58-863b534223d2"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5155),
                            IsActive = false,
                            IsDelete = false,
                            MerchantIpnUrl = "",
                            MerchantName = "BeatSports_AppOwner",
                            MerchantReturnUrl = "exp://172.31.99.194:8081",
                            MerchantWebLink = "https://www.youtube.com/index",
                            SecretKey = "54061D89-D23D-4300-8A38-C9FDF0DF94B1"
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentLastMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RequiredAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("PaymentDestinationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentDestination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentsDestinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("281b0f0d-1b5f-4a54-a102-be0aeaaddaf6"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5178),
                            DesLogo = "",
                            DesName = "Cổng thanh toán VnPay",
                            DesParentId = "",
                            DesShortName = "VNPAY",
                            IsActive = false,
                            IsDelete = false,
                            SortIndex = 0
                        },
                        new
                        {
                            Id = new Guid("4075443f-01ef-4996-83cb-d04edf62c6c1"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5183),
                            DesLogo = "",
                            DesName = "Cổng thanh toán Momo",
                            DesParentId = "",
                            DesShortName = "MOMO",
                            IsActive = false,
                            IsDelete = false,
                            SortIndex = 1
                        },
                        new
                        {
                            Id = new Guid("06066ec3-dd51-439d-bcb6-773c69fbb396"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5185),
                            DesLogo = "",
                            DesName = "Cổng thanh toán Zalopay",
                            DesParentId = "",
                            DesShortName = "ZALOPAY",
                            IsActive = false,
                            IsDelete = false,
                            SortIndex = 2
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NotiAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NotiContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NotiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotiMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotiNotiStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NotiResDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotiResHttpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotiResMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotiSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentRefId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentNotifications");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignAlgo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignOwn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentSignatures");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TranAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TranDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TranMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-4a5b-8c2d-3e4f567a89b1"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4939),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4939),
                            LevelName = "Beginner"
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-6f7a-4a5b-0d1e-2f3a4b5c6d7e"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4941),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4942),
                            LevelName = "Medium"
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-7a8b-4a5b-1c2d-3e4f5a6b7c8d"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4943),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4944),
                            LevelName = "Expert"
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.RoomMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTimeRoom")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaximumMember")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleRoom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimeRoom")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("LevelId");

                    b.ToTable("RoomMatches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1e3c431-4f5b-4ebc-b485-82f456d012c4"),
                            BookingId = new Guid("0fa91b15-e147-4a4c-931b-5a1abc2efb93"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5033),
                            EndTimeRoom = new DateTime(2024, 7, 27, 0, 2, 54, 174, DateTimeKind.Local).AddTicks(5031),
                            IsDelete = false,
                            IsPrivate = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5033),
                            LevelId = new Guid("1a2b3c4d-5e6f-4a5b-8c2d-3e4f567a89b1"),
                            MaximumMember = 20,
                            Note = "Note Sample",
                            RuleRoom = "Rule Room Sample",
                            SportCategory = 0,
                            StartTimeRoom = new DateTime(2024, 7, 26, 23, 2, 54, 174, DateTimeKind.Local).AddTicks(5030)
                        },
                        new
                        {
                            Id = new Guid("ecb739f6-55a2-4318-aa17-824ed2c50e88"),
                            BookingId = new Guid("22ae1f0b-3b4a-4c7b-947e-3612c4b6a8cd"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5051),
                            EndTimeRoom = new DateTime(2024, 7, 27, 1, 2, 54, 174, DateTimeKind.Local).AddTicks(5050),
                            IsDelete = false,
                            IsPrivate = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5052),
                            LevelId = new Guid("2b3c4d5e-6f7a-4a5b-0d1e-2f3a4b5c6d7e"),
                            MaximumMember = 20,
                            Note = "Note Sample",
                            RuleRoom = "Rule Room Sample",
                            SportCategory = 0,
                            StartTimeRoom = new DateTime(2024, 7, 26, 23, 37, 54, 174, DateTimeKind.Local).AddTicks(5049)
                        },
                        new
                        {
                            Id = new Guid("c7605db8-d9ab-4ab8-a1c8-14d30f955707"),
                            BookingId = new Guid("fba3e7b2-981f-4038-a306-7432db3ef4c6"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5056),
                            EndTimeRoom = new DateTime(2024, 7, 27, 0, 2, 54, 174, DateTimeKind.Local).AddTicks(5055),
                            IsDelete = false,
                            IsPrivate = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(5056),
                            LevelId = new Guid("3c4d5e6f-7a8b-4a5b-1c2d-3e4f5a6b7c8d"),
                            MaximumMember = 20,
                            Note = "Note Sample",
                            RuleRoom = "Rule Room Sample",
                            SportCategory = 0,
                            StartTimeRoom = new DateTime(2024, 7, 26, 23, 2, 54, 174, DateTimeKind.Local).AddTicks(5054)
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.RoomMember", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleInRoom")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "RoomMatchId");

                    b.HasIndex("RoomMatchId");

                    b.ToTable("RoomMembers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174100"),
                            RoomMatchId = new Guid("a1e3c431-4f5b-4ebc-b485-82f456d012c4"),
                            RoleInRoom = 0
                        },
                        new
                        {
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174101"),
                            RoomMatchId = new Guid("a1e3c431-4f5b-4ebc-b485-82f456d012c4"),
                            RoleInRoom = 1
                        },
                        new
                        {
                            CustomerId = new Guid("123e4567-e89b-12d3-a456-426614174102"),
                            RoomMatchId = new Guid("a1e3c431-4f5b-4ebc-b485-82f456d012c4"),
                            RoleInRoom = 1
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.RoomRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateApprove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("JoinStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomMatchId");

                    b.ToTable("RoomRequests");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.SportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SportsCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a781b595-6a4f-4d9a-b845-fb0f5c2c9a0a"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4868),
                            Description = "Sample Description",
                            ImageURL = "Sample Image",
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4868),
                            Name = "Bóng đá"
                        },
                        new
                        {
                            Id = new Guid("4a6b05bc-fc25-45fe-abe9-11a4d9380f07"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4871),
                            Description = "Sample Description",
                            ImageURL = "Sample Image",
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4871),
                            Name = "Bóng chuyền"
                        },
                        new
                        {
                            Id = new Guid("c01babc6-4047-47d5-bc9b-93c678b6342d"),
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4873),
                            Description = "Sample Description",
                            ImageURL = "Sample Image",
                            IsActive = true,
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4873),
                            Name = "Cầu lông"
                        });
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AdminCheckStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletTargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b6fe7d8-efaa-4429-ada3-b8c4b5fb1d1f"),
                            AccountId = new Guid("4a6fe7d8-efaa-4429-ada3-b8c4b5fb1d5f"),
                            Balance = 18000000m,
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4608),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4609)
                        },
                        new
                        {
                            Id = new Guid("bd7ee2c3-5c10-4567-9a87-d071d6f8c312"),
                            AccountId = new Guid("bd7ee2c3-5c10-4567-9a87-d071d6f8c3b2"),
                            Balance = 182000000m,
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4612),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4612)
                        },
                        new
                        {
                            Id = new Guid("7e9fe0da-2abe-4e58-bdfd-5d64a6549347"),
                            AccountId = new Guid("7e9fe0da-2abe-4e58-bdfd-5d64a6549d47"),
                            Balance = 12000000m,
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4615),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4615)
                        },
                        new
                        {
                            Id = new Guid("91c2f231-c3e9-4a13-a4d6-1ab2ca2c9765"),
                            AccountId = new Guid("91c2f231-c3e9-4a13-a4d6-1ab2ca2c9754"),
                            Balance = 13000000m,
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4617),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4621)
                        },
                        new
                        {
                            Id = new Guid("9dca19fd-072c-4d2f-b7a7-1d0d273f9034"),
                            AccountId = new Guid("9dca19fd-072c-4d2f-b7a7-1d0d273f9014"),
                            Balance = 13000000m,
                            Created = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4625),
                            IsDelete = false,
                            LastModified = new DateTime(2024, 7, 26, 14, 7, 54, 174, DateTimeKind.Utc).AddTicks(4626)
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DeviceFlowCodes");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PersistedGrant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken<string>");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Booking", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Booking")
                        .HasForeignKey("CampaignId");

                    b.HasOne("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivision", "CourtSubdivision")
                        .WithMany("Bookings")
                        .HasForeignKey("CourtSubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("CourtSubdivision");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.CourtEntity.Court", "Court")
                        .WithMany("Campaigns")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.Court", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Owner", "Owner")
                        .WithMany("ListCourt")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivision", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.CourtEntity.Court", "Court")
                        .WithMany("CourtSubdivision")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivisionSetting", "CourtSubdivisionSettings")
                        .WithMany("CourtSubdivisions")
                        .HasForeignKey("CourtSubdivisionSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("CourtSubdivisionSettings");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivisionSetting", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.SportCategory", "SportCategories")
                        .WithMany("CourtSubdivisionSettings")
                        .HasForeignKey("SportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportCategories");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.TimeChecking", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivision", "CourtSubdivision")
                        .WithMany("TimeCheckings")
                        .HasForeignKey("CourtSubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtSubdivision");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.TimePeriod", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.CourtEntity.Court", "Courts")
                        .WithMany("TimePeriods")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courts");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("BeatSportsAPI.Domain.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.DeviceToken", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Account", "Account")
                        .WithMany("DeviceToken")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Booking", "Booking")
                        .WithOne("Feedback")
                        .HasForeignKey("BeatSportsAPI.Domain.Entities.Feedback", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.CourtEntity.Court", "Court")
                        .WithMany("Feedback")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Notification", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Account", "Accounts")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Owner", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Account", "Account")
                        .WithOne("Owner")
                        .HasForeignKey("BeatSportsAPI.Domain.Entities.Owner", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.Payment", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Account", "Account")
                        .WithMany("Payment")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.PaymentEntity.Merchant", "Merchant")
                        .WithMany("Payment")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentDestination", "PaymentDestination")
                        .WithMany("Payment")
                        .HasForeignKey("PaymentDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Merchant");

                    b.Navigation("PaymentDestination");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentNotification", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.PaymentEntity.Merchant", "Merchant")
                        .WithMany("PaymentNotification")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.PaymentEntity.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentSignature", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.PaymentEntity.Payment", "Payment")
                        .WithMany("PaymentSignature")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentTransaction", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.PaymentEntity.Payment", "Payment")
                        .WithMany("PaymentTransaction")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.RoomMatch", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Booking", "Booking")
                        .WithOne("RoomMatch")
                        .HasForeignKey("BeatSportsAPI.Domain.Entities.Room.RoomMatch", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.Room.Level", "Level")
                        .WithMany("RoomMatch")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.RoomMember", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Customer", "Customer")
                        .WithMany("RoomMembers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.Room.RoomMatch", "RoomMatch")
                        .WithMany("RoomMembers")
                        .HasForeignKey("RoomMatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RoomMatch");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.RoomRequest", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Customer", "Customer")
                        .WithMany("RoomRequest")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSportsAPI.Domain.Entities.Room.RoomMatch", "RoomMatch")
                        .WithMany("RoomRequests")
                        .HasForeignKey("RoomMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RoomMatch");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transaction")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("BeatSportsAPI.Domain.Entities.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("BeatSportsAPI.Domain.Entities.Wallet", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("DeviceToken");

                    b.Navigation("Notifications");

                    b.Navigation("Owner");

                    b.Navigation("Payment");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("RoomMatch");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.Court", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("CourtSubdivision");

                    b.Navigation("Feedback");

                    b.Navigation("TimePeriods");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivision", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TimeCheckings");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.CourtEntity.CourtSubdivisionSetting", b =>
                {
                    b.Navigation("CourtSubdivisions");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomMembers");

                    b.Navigation("RoomRequest");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Owner", b =>
                {
                    b.Navigation("ListCourt");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.Merchant", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("PaymentNotification");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.Payment", b =>
                {
                    b.Navigation("PaymentSignature");

                    b.Navigation("PaymentTransaction");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.PaymentEntity.PaymentDestination", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.Level", b =>
                {
                    b.Navigation("RoomMatch");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Room.RoomMatch", b =>
                {
                    b.Navigation("RoomMembers");

                    b.Navigation("RoomRequests");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.SportCategory", b =>
                {
                    b.Navigation("CourtSubdivisionSettings");
                });

            modelBuilder.Entity("BeatSportsAPI.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
